plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

android {

    // ----- BEGIN flavorDimensions (autogenerated by flutter_flavorizr) -----
    flavorDimensions += "flavor-type"

    productFlavors {
        dev {
            dimension "flavor-type"
            applicationId "com.example.flutter_template.dev"
            minSdkVersion 30
            targetSdkVersion 35
            compileSdk 35
            resValue "string", "app_name", "Example Dev"
        }
        prod {
            dimension "flavor-type"
            applicationId "com.example.flutter_template"
            minSdkVersion 30
            targetSdkVersion 35
            compileSdk 35
            resValue "string", "app_name", "Example"
        }
    }

    // ----- END flavorDimensions (autogenerated by flutter_flavorizr) -----

    signingConfigs {
        dev {
            def keystorePropertiesFile = rootProject.file('key-dev.properties')
            def keystoreProperties = new Properties()

            if (keystorePropertiesFile.exists()) {
                println "Using keystore from key-dev.properties"
                keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
                storePassword keystoreProperties['storePassword']
            } else {
                // Set empty properties if the keystore file is not found
                println "Keystore file for dev flavor not found, using empty properties."
                keyAlias ''
                keyPassword ''
                storeFile null
                storePassword ''
            }
        }

        prod {
            def keystorePropertiesFile = rootProject.file('key-prod.properties')
            def keystoreProperties = new Properties()

            if (keystorePropertiesFile.exists()) {
                println "Using keystore from key-prod.properties"
                keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
                storePassword keystoreProperties['storePassword']
            } else {
                // Set empty properties if the keystore file is not found
                println "Keystore file for prod flavor not found, using empty properties."
                keyAlias ''
                keyPassword ''
                storeFile null
                storePassword ''
            }
        }
    }

    namespace = "com.example.flutter_template"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "com.example.flutter_template"
        // You can update the following values to match your application needs.
        // For more information, see: https://flutter.dev/to/review-gradle-config.
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutter.versionCode
        versionName = flutter.versionName
    }

    buildTypes {
        release {
            productFlavors.dev.signingConfig signingConfigs.dev
            productFlavors.prod.signingConfig signingConfigs.prod

            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            signingConfig signingConfigs.debug
        }
    }
}

flutter {
    source = "../.."
}
